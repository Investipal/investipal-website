---
// Dynamic Blog Post Page
// Renders individual blog posts using the BlogPostLayout

import { getCollection } from 'astro:content';
import BlogPostLayout from '../../layouts/BlogPostLayout.astro';

// Generate static paths for all blog posts
export async function getStaticPaths() {
  try {
    const posts = await getCollection('blog');
    console.log('Posts for static paths:', posts.length);
    
    // Filter out draft posts in production
    const publishedPosts = posts.filter(post => !post.data.draft);
    
    return publishedPosts.map((post) => ({
      params: { slug: post.id },
      props: { post },
    }));
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

const { post } = Astro.props;
const { Content, headings } = await post.render();

// Calculate reading time if not provided
function calculateReadingTime(content: string): number {
  const wordsPerMinute = 200;
  const words = content.split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
}

// Enhance frontmatter with calculated fields
const enhancedFrontmatter = {
  ...post.data,
  readingTime: post.data.readingTime || calculateReadingTime(post.body || ''),
};
---

<BlogPostLayout frontmatter={enhancedFrontmatter} slug={post.id} headings={headings}>
  <Content />
</BlogPostLayout>
